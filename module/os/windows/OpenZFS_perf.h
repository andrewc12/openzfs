//------------------------------------------------------------------
//                   !!! WARNING !!! 
//
// This file is auto generated by ctrpp.exe utility from performance
// counters manifest:
//
// C:/Users/andre/Documents/GitHub/openzfs/module/os/windows/OpenZFS.man
//
// It should be regenerated every time the code is built.
// Do not check it in.
//-------------------------------------------------------------------

#pragma once

//
// Set CTRPP_VERIFY_COUNTER_SIZES to 1 before including this header to verify
// that structure member size matches manifest counter size.
//
#ifndef CTRPP_VERIFY_COUNTER_SIZES
#define CTRPP_VERIFY_COUNTER_SIZES 0
#endif









#pragma code_seg(push, "PAGE")

EXTERN_C DECLSPEC_SELECTANY PPCW_REGISTRATION ZFSinPerf = NULL;
EXTERN_C DECLSPEC_SELECTANY PPCW_REGISTRATION ZFSinPerfVdev = NULL;
EXTERN_C DECLSPEC_SELECTANY PPCW_REGISTRATION ZFSinCachePerf = NULL;

EXTERN_C FORCEINLINE VOID
InitRegistrationInformationZFSinPerf(
    __in_opt PPCW_CALLBACK Callback,
    __in_opt PVOID CallbackContext,
    __out PCW_REGISTRATION_INFORMATION* RegInfo
    )
{
    static const UNICODE_STRING Name = RTL_CONSTANT_STRING(L"OpenZFS Zpool");
    static const PCW_COUNTER_DESCRIPTOR Descriptors[] = {
        { 1, 0, FIELD_OFFSET(zpool_perf_counters, read_iops), RTL_FIELD_SIZE(zpool_perf_counters, read_iops)},
        { 2, 0, FIELD_OFFSET(zpool_perf_counters, write_iops), RTL_FIELD_SIZE(zpool_perf_counters, write_iops)},
        { 3, 0, FIELD_OFFSET(zpool_perf_counters, total_iops), RTL_FIELD_SIZE(zpool_perf_counters, total_iops)},
        { 4, 0, FIELD_OFFSET(zpool_perf_counters, read_bytes), RTL_FIELD_SIZE(zpool_perf_counters, read_bytes)},
        { 5, 0, FIELD_OFFSET(zpool_perf_counters, write_bytes), RTL_FIELD_SIZE(zpool_perf_counters, write_bytes)},
        { 6, 0, FIELD_OFFSET(zpool_perf_counters, total_bytes), RTL_FIELD_SIZE(zpool_perf_counters, total_bytes)},
        { 7, 0, FIELD_OFFSET(zpool_perf_counters, ddt_entry_count), RTL_FIELD_SIZE(zpool_perf_counters, ddt_entry_count)},
        { 8, 0, FIELD_OFFSET(zpool_perf_counters, ddt_dspace), RTL_FIELD_SIZE(zpool_perf_counters, ddt_dspace)},
        { 9, 0, FIELD_OFFSET(zpool_perf_counters, ddt_mspace), RTL_FIELD_SIZE(zpool_perf_counters, ddt_mspace)},
        { 10, 0, FIELD_OFFSET(zpool_perf_counters, vsx_active_queue_sync_read), RTL_FIELD_SIZE(zpool_perf_counters, vsx_active_queue_sync_read)},
        { 11, 0, FIELD_OFFSET(zpool_perf_counters, vsx_active_queue_sync_write), RTL_FIELD_SIZE(zpool_perf_counters, vsx_active_queue_sync_write)},
        { 12, 0, FIELD_OFFSET(zpool_perf_counters, vsx_active_queue_async_read), RTL_FIELD_SIZE(zpool_perf_counters, vsx_active_queue_async_read)},
        { 13, 0, FIELD_OFFSET(zpool_perf_counters, vsx_active_queue_async_write), RTL_FIELD_SIZE(zpool_perf_counters, vsx_active_queue_async_write)},
        { 14, 0, FIELD_OFFSET(zpool_perf_counters, vsx_pend_queue_sync_read), RTL_FIELD_SIZE(zpool_perf_counters, vsx_pend_queue_sync_read)},
        { 15, 0, FIELD_OFFSET(zpool_perf_counters, vsx_pend_queue_sync_write), RTL_FIELD_SIZE(zpool_perf_counters, vsx_pend_queue_sync_write)},
        { 16, 0, FIELD_OFFSET(zpool_perf_counters, vsx_pend_queue_async_read), RTL_FIELD_SIZE(zpool_perf_counters, vsx_pend_queue_async_read)},
        { 17, 0, FIELD_OFFSET(zpool_perf_counters, vsx_pend_queue_async_write), RTL_FIELD_SIZE(zpool_perf_counters, vsx_pend_queue_async_write)},
        { 18, 0, FIELD_OFFSET(zpool_perf_counters, vsx_queue_histo_sync_read_time), RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_sync_read_time)},
        { 19, 0, FIELD_OFFSET(zpool_perf_counters, vsx_queue_histo_sync_read_count), RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_sync_read_count)},
        { 20, 0, FIELD_OFFSET(zpool_perf_counters, vsx_queue_histo_async_read_time), RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_async_read_time)},
        { 21, 0, FIELD_OFFSET(zpool_perf_counters, vsx_queue_histo_async_read_count), RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_async_read_count)},
        { 22, 0, FIELD_OFFSET(zpool_perf_counters, vsx_queue_histo_sync_write_time), RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_sync_write_time)},
        { 23, 0, FIELD_OFFSET(zpool_perf_counters, vsx_queue_histo_sync_write_count), RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_sync_write_count)},
        { 24, 0, FIELD_OFFSET(zpool_perf_counters, vsx_queue_histo_async_write_time), RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_async_write_time)},
        { 25, 0, FIELD_OFFSET(zpool_perf_counters, vsx_queue_histo_async_write_count), RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_async_write_count)},
        { 26, 0, FIELD_OFFSET(zpool_perf_counters, vsx_total_histo_read_time), RTL_FIELD_SIZE(zpool_perf_counters, vsx_total_histo_read_time)},
        { 27, 0, FIELD_OFFSET(zpool_perf_counters, vsx_total_histo_read_count), RTL_FIELD_SIZE(zpool_perf_counters, vsx_total_histo_read_count)},
        { 28, 0, FIELD_OFFSET(zpool_perf_counters, vsx_total_histo_write_time), RTL_FIELD_SIZE(zpool_perf_counters, vsx_total_histo_write_time)},
        { 29, 0, FIELD_OFFSET(zpool_perf_counters, vsx_total_histo_write_count), RTL_FIELD_SIZE(zpool_perf_counters, vsx_total_histo_write_count)},
        { 30, 0, FIELD_OFFSET(zpool_perf_counters, vsx_disk_histo_read_time), RTL_FIELD_SIZE(zpool_perf_counters, vsx_disk_histo_read_time)},
        { 31, 0, FIELD_OFFSET(zpool_perf_counters, vsx_disk_histo_read_count), RTL_FIELD_SIZE(zpool_perf_counters, vsx_disk_histo_read_count)},
        { 32, 0, FIELD_OFFSET(zpool_perf_counters, vsx_disk_histo_write_time), RTL_FIELD_SIZE(zpool_perf_counters, vsx_disk_histo_write_time)},
        { 33, 0, FIELD_OFFSET(zpool_perf_counters, vsx_disk_histo_write_count), RTL_FIELD_SIZE(zpool_perf_counters, vsx_disk_histo_write_count)},
        { 34, 0, FIELD_OFFSET(zpool_perf_counters, dp_dirty_total_io), RTL_FIELD_SIZE(zpool_perf_counters, dp_dirty_total_io)},
    };

#if CTRPP_VERIFY_COUNTER_SIZES

    //
    // Verify that structure member size matches manifest counter size.
    //

    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, read_iops) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, write_iops) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, total_iops) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, read_bytes) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, write_bytes) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, total_bytes) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, ddt_entry_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, ddt_dspace) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, ddt_mspace) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_active_queue_sync_read) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_active_queue_sync_write) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_active_queue_async_read) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_active_queue_async_write) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_pend_queue_sync_read) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_pend_queue_sync_write) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_pend_queue_async_read) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_pend_queue_async_write) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_sync_read_time) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_sync_read_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_async_read_time) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_async_read_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_sync_write_time) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_sync_write_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_async_write_time) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_async_write_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_total_histo_read_time) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_total_histo_read_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_total_histo_write_time) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_total_histo_write_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_disk_histo_read_time) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_disk_histo_read_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_disk_histo_write_time) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_disk_histo_write_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, dp_dirty_total_io) == sizeof(ULONGLONG));

#endif // CTRPP_VERIFY_COUNTER_SIZES

    PAGED_CODE();

    RtlZeroMemory(RegInfo, sizeof(*RegInfo));
    RegInfo->Version = PCW_CURRENT_VERSION;
    RegInfo->Name = &Name;
    RegInfo->CounterCount = RTL_NUMBER_OF(Descriptors);
    RegInfo->Counters = (PCW_COUNTER_DESCRIPTOR*)Descriptors;
    RegInfo->Callback = Callback;
    RegInfo->CallbackContext = CallbackContext;
}

EXTERN_C FORCEINLINE NTSTATUS
RegisterZFSinPerf(
    __in_opt PPCW_CALLBACK Callback,
    __in_opt PVOID CallbackContext
    )
{
    PCW_REGISTRATION_INFORMATION RegInfo;

    PAGED_CODE();

    InitRegistrationInformationZFSinPerf(Callback, CallbackContext, &RegInfo);

    return PcwRegister(&ZFSinPerf, &RegInfo);
}


EXTERN_C FORCEINLINE VOID
UnregisterZFSinPerf(
    VOID
    )
{
    PAGED_CODE();

    PcwUnregister(ZFSinPerf);
}


EXTERN_C FORCEINLINE VOID
InitRegistrationInformationZFSinPerfVdev(
    __in_opt PPCW_CALLBACK Callback,
    __in_opt PVOID CallbackContext,
    __out PCW_REGISTRATION_INFORMATION* RegInfo
    )
{
    static const UNICODE_STRING Name = RTL_CONSTANT_STRING(L"OpenZFS Vdev");
    static const PCW_COUNTER_DESCRIPTOR Descriptors[] = {
        { 1, 0, FIELD_OFFSET(zpool_perf_counters, read_iops), RTL_FIELD_SIZE(zpool_perf_counters, read_iops)},
        { 2, 0, FIELD_OFFSET(zpool_perf_counters, write_iops), RTL_FIELD_SIZE(zpool_perf_counters, write_iops)},
        { 3, 0, FIELD_OFFSET(zpool_perf_counters, read_bytes), RTL_FIELD_SIZE(zpool_perf_counters, read_bytes)},
        { 4, 0, FIELD_OFFSET(zpool_perf_counters, write_bytes), RTL_FIELD_SIZE(zpool_perf_counters, write_bytes)},
        { 5, 0, FIELD_OFFSET(zpool_perf_counters, vsx_active_queue_sync_read), RTL_FIELD_SIZE(zpool_perf_counters, vsx_active_queue_sync_read)},
        { 6, 0, FIELD_OFFSET(zpool_perf_counters, vsx_active_queue_sync_write), RTL_FIELD_SIZE(zpool_perf_counters, vsx_active_queue_sync_write)},
        { 7, 0, FIELD_OFFSET(zpool_perf_counters, vsx_active_queue_async_read), RTL_FIELD_SIZE(zpool_perf_counters, vsx_active_queue_async_read)},
        { 8, 0, FIELD_OFFSET(zpool_perf_counters, vsx_active_queue_async_write), RTL_FIELD_SIZE(zpool_perf_counters, vsx_active_queue_async_write)},
        { 9, 0, FIELD_OFFSET(zpool_perf_counters, vsx_pend_queue_sync_read), RTL_FIELD_SIZE(zpool_perf_counters, vsx_pend_queue_sync_read)},
        { 10, 0, FIELD_OFFSET(zpool_perf_counters, vsx_pend_queue_sync_write), RTL_FIELD_SIZE(zpool_perf_counters, vsx_pend_queue_sync_write)},
        { 11, 0, FIELD_OFFSET(zpool_perf_counters, vsx_pend_queue_async_read), RTL_FIELD_SIZE(zpool_perf_counters, vsx_pend_queue_async_read)},
        { 12, 0, FIELD_OFFSET(zpool_perf_counters, vsx_pend_queue_async_write), RTL_FIELD_SIZE(zpool_perf_counters, vsx_pend_queue_async_write)},
        { 13, 0, FIELD_OFFSET(zpool_perf_counters, vsx_queue_histo_sync_read_time), RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_sync_read_time)},
        { 14, 0, FIELD_OFFSET(zpool_perf_counters, vsx_queue_histo_sync_read_count), RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_sync_read_count)},
        { 15, 0, FIELD_OFFSET(zpool_perf_counters, vsx_queue_histo_async_read_time), RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_async_read_time)},
        { 16, 0, FIELD_OFFSET(zpool_perf_counters, vsx_queue_histo_async_read_count), RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_async_read_count)},
        { 17, 0, FIELD_OFFSET(zpool_perf_counters, vsx_queue_histo_sync_write_time), RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_sync_write_time)},
        { 18, 0, FIELD_OFFSET(zpool_perf_counters, vsx_queue_histo_sync_write_count), RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_sync_write_count)},
        { 19, 0, FIELD_OFFSET(zpool_perf_counters, vsx_queue_histo_async_write_time), RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_async_write_time)},
        { 20, 0, FIELD_OFFSET(zpool_perf_counters, vsx_queue_histo_async_write_count), RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_async_write_count)},
        { 21, 0, FIELD_OFFSET(zpool_perf_counters, vsx_total_histo_read_time), RTL_FIELD_SIZE(zpool_perf_counters, vsx_total_histo_read_time)},
        { 22, 0, FIELD_OFFSET(zpool_perf_counters, vsx_total_histo_read_count), RTL_FIELD_SIZE(zpool_perf_counters, vsx_total_histo_read_count)},
        { 23, 0, FIELD_OFFSET(zpool_perf_counters, vsx_total_histo_write_time), RTL_FIELD_SIZE(zpool_perf_counters, vsx_total_histo_write_time)},
        { 24, 0, FIELD_OFFSET(zpool_perf_counters, vsx_total_histo_write_count), RTL_FIELD_SIZE(zpool_perf_counters, vsx_total_histo_write_count)},
        { 25, 0, FIELD_OFFSET(zpool_perf_counters, vsx_disk_histo_read_time), RTL_FIELD_SIZE(zpool_perf_counters, vsx_disk_histo_read_time)},
        { 26, 0, FIELD_OFFSET(zpool_perf_counters, vsx_disk_histo_read_count), RTL_FIELD_SIZE(zpool_perf_counters, vsx_disk_histo_read_count)},
        { 27, 0, FIELD_OFFSET(zpool_perf_counters, vsx_disk_histo_write_time), RTL_FIELD_SIZE(zpool_perf_counters, vsx_disk_histo_write_time)},
        { 28, 0, FIELD_OFFSET(zpool_perf_counters, vsx_disk_histo_write_count), RTL_FIELD_SIZE(zpool_perf_counters, vsx_disk_histo_write_count)},
        { 29, 0, FIELD_OFFSET(zpool_perf_counters, total_iops), RTL_FIELD_SIZE(zpool_perf_counters, total_iops)},
        { 30, 0, FIELD_OFFSET(zpool_perf_counters, total_bytes), RTL_FIELD_SIZE(zpool_perf_counters, total_bytes)},
    };

#if CTRPP_VERIFY_COUNTER_SIZES

    //
    // Verify that structure member size matches manifest counter size.
    //

    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, read_iops) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, write_iops) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, read_bytes) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, write_bytes) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_active_queue_sync_read) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_active_queue_sync_write) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_active_queue_async_read) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_active_queue_async_write) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_pend_queue_sync_read) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_pend_queue_sync_write) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_pend_queue_async_read) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_pend_queue_async_write) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_sync_read_time) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_sync_read_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_async_read_time) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_async_read_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_sync_write_time) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_sync_write_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_async_write_time) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_queue_histo_async_write_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_total_histo_read_time) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_total_histo_read_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_total_histo_write_time) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_total_histo_write_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_disk_histo_read_time) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_disk_histo_read_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_disk_histo_write_time) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, vsx_disk_histo_write_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, total_iops) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(zpool_perf_counters, total_bytes) == sizeof(ULONGLONG));

#endif // CTRPP_VERIFY_COUNTER_SIZES

    PAGED_CODE();

    RtlZeroMemory(RegInfo, sizeof(*RegInfo));
    RegInfo->Version = PCW_CURRENT_VERSION;
    RegInfo->Name = &Name;
    RegInfo->CounterCount = RTL_NUMBER_OF(Descriptors);
    RegInfo->Counters = (PCW_COUNTER_DESCRIPTOR*)Descriptors;
    RegInfo->Callback = Callback;
    RegInfo->CallbackContext = CallbackContext;
}

EXTERN_C FORCEINLINE NTSTATUS
RegisterZFSinPerfVdev(
    __in_opt PPCW_CALLBACK Callback,
    __in_opt PVOID CallbackContext
    )
{
    PCW_REGISTRATION_INFORMATION RegInfo;

    PAGED_CODE();

    InitRegistrationInformationZFSinPerfVdev(Callback, CallbackContext, &RegInfo);

    return PcwRegister(&ZFSinPerfVdev, &RegInfo);
}


EXTERN_C FORCEINLINE VOID
UnregisterZFSinPerfVdev(
    VOID
    )
{
    PAGED_CODE();

    PcwUnregister(ZFSinPerfVdev);
}


EXTERN_C FORCEINLINE VOID
InitRegistrationInformationZFSinCachePerf(
    __in_opt PPCW_CALLBACK Callback,
    __in_opt PVOID CallbackContext,
    __out PCW_REGISTRATION_INFORMATION* RegInfo
    )
{
    static const UNICODE_STRING Name = RTL_CONSTANT_STRING(L"OpenZFS Cache");
    static const PCW_COUNTER_DESCRIPTOR Descriptors[] = {
        { 1, 0, FIELD_OFFSET(cache_counters, arcstat_hits), RTL_FIELD_SIZE(cache_counters, arcstat_hits)},
        { 2, 0, FIELD_OFFSET(cache_counters, arcstat_misses), RTL_FIELD_SIZE(cache_counters, arcstat_misses)},
        { 3, 0, FIELD_OFFSET(cache_counters, arcstat_size), RTL_FIELD_SIZE(cache_counters, arcstat_size)},
        { 4, 0, FIELD_OFFSET(cache_counters, arcstat_c), RTL_FIELD_SIZE(cache_counters, arcstat_c)},
        { 5, 0, FIELD_OFFSET(cache_counters, arcstat_mfu_hits), RTL_FIELD_SIZE(cache_counters, arcstat_mfu_hits)},
        { 6, 0, FIELD_OFFSET(cache_counters, arcstat_mru_hits), RTL_FIELD_SIZE(cache_counters, arcstat_mru_hits)},
        { 7, 0, FIELD_OFFSET(cache_counters, arcstat_mru_ghost_hits), RTL_FIELD_SIZE(cache_counters, arcstat_mru_ghost_hits)},
        { 8, 0, FIELD_OFFSET(cache_counters, arcstat_mfu_ghost_hits), RTL_FIELD_SIZE(cache_counters, arcstat_mfu_ghost_hits)},
        { 9, 0, FIELD_OFFSET(cache_counters, arcstat_evict_skip), RTL_FIELD_SIZE(cache_counters, arcstat_evict_skip)},
        { 10, 0, FIELD_OFFSET(cache_counters, arcstat_mutex_miss), RTL_FIELD_SIZE(cache_counters, arcstat_mutex_miss)},
        { 11, 0, FIELD_OFFSET(cache_counters, arcstat_compressed_size), RTL_FIELD_SIZE(cache_counters, arcstat_compressed_size)},
        { 12, 0, FIELD_OFFSET(cache_counters, arcstat_uncompressed_size), RTL_FIELD_SIZE(cache_counters, arcstat_uncompressed_size)},
        { 13, 0, FIELD_OFFSET(cache_counters, arcstat_overhead_size), RTL_FIELD_SIZE(cache_counters, arcstat_overhead_size)},
        { 14, 0, FIELD_OFFSET(cache_counters, arcstat_l2_hits), RTL_FIELD_SIZE(cache_counters, arcstat_l2_hits)},
        { 15, 0, FIELD_OFFSET(cache_counters, arcstat_l2_misses), RTL_FIELD_SIZE(cache_counters, arcstat_l2_misses)},
        { 16, 0, FIELD_OFFSET(cache_counters, arcstat_l2_read_bytes), RTL_FIELD_SIZE(cache_counters, arcstat_l2_read_bytes)},
        { 17, 0, FIELD_OFFSET(cache_counters, arcstat_l2_write_bytes), RTL_FIELD_SIZE(cache_counters, arcstat_l2_write_bytes)},
        { 18, 0, FIELD_OFFSET(cache_counters, arcstat_total_demand_hits), RTL_FIELD_SIZE(cache_counters, arcstat_total_demand_hits)},
        { 19, 0, FIELD_OFFSET(cache_counters, arcstat_total_demand_miss), RTL_FIELD_SIZE(cache_counters, arcstat_total_demand_miss)},
        { 20, 0, FIELD_OFFSET(cache_counters, arcstat_perfetch_hits), RTL_FIELD_SIZE(cache_counters, arcstat_perfetch_hits)},
        { 21, 0, FIELD_OFFSET(cache_counters, arcstat_perfetch_miss), RTL_FIELD_SIZE(cache_counters, arcstat_perfetch_miss)},
        { 22, 0, FIELD_OFFSET(cache_counters, arcstat_perfetch_ps), RTL_FIELD_SIZE(cache_counters, arcstat_perfetch_ps)},
        { 23, 0, FIELD_OFFSET(cache_counters, arcstat_read_ps), RTL_FIELD_SIZE(cache_counters, arcstat_read_ps)},
        { 24, 0, FIELD_OFFSET(cache_counters, arcstat_metadata_hit_ps), RTL_FIELD_SIZE(cache_counters, arcstat_metadata_hit_ps)},
        { 25, 0, FIELD_OFFSET(cache_counters, arcstat_metadata_miss_ps), RTL_FIELD_SIZE(cache_counters, arcstat_metadata_miss_ps)},
        { 26, 0, FIELD_OFFSET(cache_counters, arcstat_metadata_accesses_ps), RTL_FIELD_SIZE(cache_counters, arcstat_metadata_accesses_ps)},
        { 27, 0, FIELD_OFFSET(cache_counters, arcstat_demand_ps), RTL_FIELD_SIZE(cache_counters, arcstat_demand_ps)},
        { 28, 0, FIELD_OFFSET(cache_counters, arcstat_l2_access_ps), RTL_FIELD_SIZE(cache_counters, arcstat_l2_access_ps)},
        { 29, 0, FIELD_OFFSET(cache_counters, zil_commit_count), RTL_FIELD_SIZE(cache_counters, zil_commit_count)},
        { 30, 0, FIELD_OFFSET(cache_counters, zil_commit_writer_count), RTL_FIELD_SIZE(cache_counters, zil_commit_writer_count)},
        { 31, 0, FIELD_OFFSET(cache_counters, zil_itx_count), RTL_FIELD_SIZE(cache_counters, zil_itx_count)},
        { 32, 0, FIELD_OFFSET(cache_counters, zil_itx_indirect_count), RTL_FIELD_SIZE(cache_counters, zil_itx_indirect_count)},
        { 33, 0, FIELD_OFFSET(cache_counters, zil_itx_indirect_bytes), RTL_FIELD_SIZE(cache_counters, zil_itx_indirect_bytes)},
        { 34, 0, FIELD_OFFSET(cache_counters, zil_itx_copied_count), RTL_FIELD_SIZE(cache_counters, zil_itx_copied_count)},
        { 35, 0, FIELD_OFFSET(cache_counters, zil_itx_copied_bytes), RTL_FIELD_SIZE(cache_counters, zil_itx_copied_bytes)},
        { 36, 0, FIELD_OFFSET(cache_counters, zil_itx_needcopy_count), RTL_FIELD_SIZE(cache_counters, zil_itx_needcopy_count)},
        { 37, 0, FIELD_OFFSET(cache_counters, zil_itx_needcopy_bytes), RTL_FIELD_SIZE(cache_counters, zil_itx_needcopy_bytes)},
        { 38, 0, FIELD_OFFSET(cache_counters, zil_itx_metaslab_normal_count), RTL_FIELD_SIZE(cache_counters, zil_itx_metaslab_normal_count)},
        { 39, 0, FIELD_OFFSET(cache_counters, zil_itx_metaslab_normal_bytes), RTL_FIELD_SIZE(cache_counters, zil_itx_metaslab_normal_bytes)},
        { 40, 0, FIELD_OFFSET(cache_counters, zil_itx_metaslab_slog_count), RTL_FIELD_SIZE(cache_counters, zil_itx_metaslab_slog_count)},
        { 41, 0, FIELD_OFFSET(cache_counters, zil_itx_metaslab_slog_bytes), RTL_FIELD_SIZE(cache_counters, zil_itx_metaslab_slog_bytes)},
    };

#if CTRPP_VERIFY_COUNTER_SIZES

    //
    // Verify that structure member size matches manifest counter size.
    //

    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_hits) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_misses) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_size) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_c) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_mfu_hits) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_mru_hits) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_mru_ghost_hits) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_mfu_ghost_hits) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_evict_skip) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_mutex_miss) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_compressed_size) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_uncompressed_size) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_overhead_size) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_l2_hits) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_l2_misses) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_l2_read_bytes) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_l2_write_bytes) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_total_demand_hits) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_total_demand_miss) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_perfetch_hits) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_perfetch_miss) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_perfetch_ps) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_read_ps) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_metadata_hit_ps) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_metadata_miss_ps) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_metadata_accesses_ps) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_demand_ps) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, arcstat_l2_access_ps) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, zil_commit_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, zil_commit_writer_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, zil_itx_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, zil_itx_indirect_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, zil_itx_indirect_bytes) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, zil_itx_copied_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, zil_itx_copied_bytes) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, zil_itx_needcopy_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, zil_itx_needcopy_bytes) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, zil_itx_metaslab_normal_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, zil_itx_metaslab_normal_bytes) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, zil_itx_metaslab_slog_count) == sizeof(ULONGLONG));
    C_ASSERT(RTL_FIELD_SIZE(cache_counters, zil_itx_metaslab_slog_bytes) == sizeof(ULONGLONG));

#endif // CTRPP_VERIFY_COUNTER_SIZES

    PAGED_CODE();

    RtlZeroMemory(RegInfo, sizeof(*RegInfo));
    RegInfo->Version = PCW_CURRENT_VERSION;
    RegInfo->Name = &Name;
    RegInfo->CounterCount = RTL_NUMBER_OF(Descriptors);
    RegInfo->Counters = (PCW_COUNTER_DESCRIPTOR*)Descriptors;
    RegInfo->Callback = Callback;
    RegInfo->CallbackContext = CallbackContext;
}

EXTERN_C FORCEINLINE NTSTATUS
RegisterZFSinCachePerf(
    __in_opt PPCW_CALLBACK Callback,
    __in_opt PVOID CallbackContext
    )
{
    PCW_REGISTRATION_INFORMATION RegInfo;

    PAGED_CODE();

    InitRegistrationInformationZFSinCachePerf(Callback, CallbackContext, &RegInfo);

    return PcwRegister(&ZFSinCachePerf, &RegInfo);
}


EXTERN_C FORCEINLINE VOID
UnregisterZFSinCachePerf(
    VOID
    )
{
    PAGED_CODE();

    PcwUnregister(ZFSinCachePerf);
}


EXTERN_C __inline NTSTATUS
CreateZFSinPerf(
    __deref_out PPCW_INSTANCE *Instance,
    __in PCUNICODE_STRING Name,
    __in const zpool_perf_counters *ZFSinPerfValues
    )
{
    PCW_DATA Data[1];

    PAGED_CODE();

    Data[0].Data = ZFSinPerfValues;
    Data[0].Size = sizeof(zpool_perf_counters);

    return PcwCreateInstance(Instance,
                             ZFSinPerf,
                             Name,
                             1,
                             Data);
}


EXTERN_C FORCEINLINE VOID
CloseZFSinPerf(
    __in PPCW_INSTANCE Instance
    )
{
    PAGED_CODE();

    PcwCloseInstance(Instance);
}


EXTERN_C __inline NTSTATUS
AddZFSinPerf(
    __in PPCW_BUFFER Buffer,
    __in PCUNICODE_STRING Name,
    __in ULONG Id,
    __in_opt const zpool_perf_counters *ZFSinPerfValues
    )
{
    PCW_DATA Data[1];

    PAGED_CODE();

    Data[0].Data = ZFSinPerfValues;
    Data[0].Size = sizeof(zpool_perf_counters);

    return PcwAddInstance(Buffer,
                          Name,
                          Id,
                          1,
                          Data);
}


EXTERN_C __inline NTSTATUS
CreateZFSinPerfVdev(
    __deref_out PPCW_INSTANCE *Instance,
    __in PCUNICODE_STRING Name,
    __in const zpool_perf_counters *ZFSinVdevValues
    )
{
    PCW_DATA Data[1];

    PAGED_CODE();

    Data[0].Data = ZFSinVdevValues;
    Data[0].Size = sizeof(zpool_perf_counters);

    return PcwCreateInstance(Instance,
                             ZFSinPerfVdev,
                             Name,
                             1,
                             Data);
}


EXTERN_C FORCEINLINE VOID
CloseZFSinPerfVdev(
    __in PPCW_INSTANCE Instance
    )
{
    PAGED_CODE();

    PcwCloseInstance(Instance);
}


EXTERN_C __inline NTSTATUS
AddZFSinPerfVdev(
    __in PPCW_BUFFER Buffer,
    __in PCUNICODE_STRING Name,
    __in ULONG Id,
    __in_opt const zpool_perf_counters *ZFSinVdevValues
    )
{
    PCW_DATA Data[1];

    PAGED_CODE();

    Data[0].Data = ZFSinVdevValues;
    Data[0].Size = sizeof(zpool_perf_counters);

    return PcwAddInstance(Buffer,
                          Name,
                          Id,
                          1,
                          Data);
}


EXTERN_C __inline NTSTATUS
CreateZFSinCachePerf(
    __deref_out PPCW_INSTANCE *Instance,
    __in PCUNICODE_STRING Name,
    __in const cache_counters *ZFSinCachePerfValues
    )
{
    PCW_DATA Data[1];

    PAGED_CODE();

    Data[0].Data = ZFSinCachePerfValues;
    Data[0].Size = sizeof(cache_counters);

    return PcwCreateInstance(Instance,
                             ZFSinCachePerf,
                             Name,
                             1,
                             Data);
}


EXTERN_C FORCEINLINE VOID
CloseZFSinCachePerf(
    __in PPCW_INSTANCE Instance
    )
{
    PAGED_CODE();

    PcwCloseInstance(Instance);
}


EXTERN_C __inline NTSTATUS
AddZFSinCachePerf(
    __in PPCW_BUFFER Buffer,
    __in PCUNICODE_STRING Name,
    __in ULONG Id,
    __in_opt const cache_counters *ZFSinCachePerfValues
    )
{
    PCW_DATA Data[1];

    PAGED_CODE();

    Data[0].Data = ZFSinCachePerfValues;
    Data[0].Size = sizeof(cache_counters);

    return PcwAddInstance(Buffer,
                          Name,
                          Id,
                          1,
                          Data);
}


#pragma code_seg(pop)
